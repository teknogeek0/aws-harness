{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Builds a VPC w/ 2 public and 2 private Subnets, a IGW, a NAT instance, and  bastion instance. **WARNING** This template creates Amazon EC2 instance(s). You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {
  	"KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },

    "BastionKeyName" : {
      "Description" : "Name of the EC2 KeyPair we will create internally to access instances in our VPC",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    }
  },

  "Mappings" : {
  	"AWSNATAMI": {
      "us-east-1": {"AMI": "ami-ad227cc4"},
      "us-west-2": {"AMI": "ami-f032acc0"},
      "us-west-1": {"AMI": "ami-d69aad93"},
      "eu-west-1": {"AMI": "ami-f3e30084"},
      "ap-southeast-1": {"AMI": "ami-f22772a0"},
      "ap-southeast-2": {"AMI": "ami-3bae3201"},
      "ap-northeast-1": {"AMI": "ami-cd43d9cc"},
      "sa-east-1": {"AMI": "ami-d78325ca"}
    },

    "AWSInstanceType2Virt": {
      "t1.micro": {"Virt": "PVM"},
      "m1.small": {"Virt": "PVM"},
	    "m3.medium": {"Virt": "PVM"},
      "m3.large": {"Virt": "PVM"},
      "m3.xlarge": {"Virt": "PVM"},
      "m3.2xlarge": {"Virt": "PVM"},
      "c3.large": {"Virt": "HVM"},
      "c3.xlarge": {"Virt": "HVM"},
      "c3.2xlarge": {"Virt": "HVM"},
      "c3.4xlarge": {"Virt": "HVM"},
      "c3.8xlarge": {"Virt": "HVM"},
      "r3.large": {"Virt": "HVM"},
      "r3.xlarge": {"Virt": "HVM"},
      "r3.2xlarge": {"Virt": "HVM"},
      "r3.4xlarge": {"Virt": "HVM"},
      "r3.8xlarge": {"Virt": "HVM"},
      "g2.2xlarge": {"Virt": "64GPU"},
      "i2.xlarge": {"Virt": "HVM"},
      "i2.2xlarge": {"Virt": "HVM"},
      "i2.4xlarge": {"Virt": "HVM"},
      "i2.8xlarge": {"Virt": "HVM"},
      "hs1.8xlarge": {"Virt": "PVM"}
    },

    "AWSRegionVirt2AMI": {
      "us-east-1": {
        "PVM": "ami-2f726546",
        "HVM": "ami-51736438",
        "64GPU": "ami-018e9968"
      },
      "us-west-2": {
        "PVM": "ami-b8f69f88",
        "HVM": "ami-60f69f50",
        "64GPU": "ami-fe3e56ce"
      },
      "us-west-1": {
        "PVM": "ami-84f1cfc1",
        "HVM": "ami-e6f1cfa3",
        "64GPU": "ami-0ed2ec4b"
      },
      "eu-west-1": {
        "PVM": "ami-a921dfde",
        "HVM": "ami-bb21dfcc",
        "64GPU": "ami-735da304"
      },
      "ap-southeast-1": {
        "PVM": "ami-787c2c2a",
        "HVM": "ami-727c2c20",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "ap-northeast-1": {
        "PVM": "ami-a1bec3a0",
        "HVM": "ami-ebbfc2ea",
        "64GPU": "ami-6bd7aa6a"
      },
      "ap-southeast-2": {
        "PVM": "ami-0bc85031",
        "HVM": "ami-25c8501f",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "sa-east-1": {
        "PVM": "ami-89de7c94",
        "HVM": "ami-3bde7c26",
        "64GPU": "NOT_YET_SUPPORTED"
      }
    },

    "SubnetConfig": {
      "VPC": {
        "CIDR": "10.1.0.0/16"
      },
      "Public1": {
        "CIDR": "10.1.100.0/24"
      },
      "Public2": {
        "CIDR": "10.1.101.0/24"
      },
      "Private1": {
        "CIDR": "10.1.200.0/24"
      },
      "Private2": {
        "CIDR": "10.1.201.0/24"
      }
    }
  },

  "Resources" : {
  	"VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock": {"Fn::FindInMap": ["SubnetConfig", "VPC", "CIDR"]},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackName"} }
        ]
      }
    },

    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::FindInMap": ["SubnetConfig", "Public1", "CIDR"]},
        "AvailabilityZone": {"Ref": ""},
        "Tags": [
          {"Key": "Application", "Value": {"Ref": "AWS::StackId"}},
          {"Key": "Network", "Value": "Public"}
        ]
      }
    },

    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "Public2", "CIDR"]
        },
        "AvailabilityZone": {
          "Ref": "VPCAvailabilityZone2"
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },

    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },

    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "InboundHTTPPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },

    "InboundHTTPSPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },

    "InboundSSHPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "SSHFrom"
        },
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },

    "InboundEmphemeralPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },

    "OutboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },

    "PublicSubnet1NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },

    "PublicSubnet2NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },

    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Ref": "VPCAvailabilityZone1"
        },
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "Private1", "CIDR"]
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Private"
        }]
      }
    },

    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Ref": "VPCAvailabilityZone2"
        },
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "Private2", "CIDR"]
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Private"
        }]
      }
    },

    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Private"
        }]
      }
    },

    "PrivateSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },

    "PrivateSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },

    "PrivateRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NATDevice"
        }
      }
    },

    "PrivateNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Private"
        }]
      }
    },

    "InboundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },

    "OutBoundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },

    "PrivateSubnet1NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },

    "PrivateSubnet2NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },

    "NATIPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "NATDevice"
        }
      }
    },

    "NATDevice": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "NATInstanceType"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "SourceDestCheck": "false",
        "ImageId": {
          "Fn::FindInMap": ["AWSNATAMI", {
            "Ref": "AWS::Region"
          }, "AMI"]
        },
        "SecurityGroupIds": [{
          "Ref": "NATSecurityGroup"
        }]
      }
    },

    "NATSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable internal access to the NAT device",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "SourceSecurityGroupId": {
            "Ref": "InstanceSecurityGroup"
          }
        }, {
          "IpProtocol": "tcp",
          "FromPort": "443",
          "ToPort": "443",
          "SourceSecurityGroupId": {
            "Ref": "InstanceSecurityGroup"
          }
        }],
        "SecurityGroupEgress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }, {
          "IpProtocol": "tcp",
          "FromPort": "443",
          "ToPort": "443",
          "CidrIp": "0.0.0.0/0"
        }]
      }
    },

    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SG that EB instances will launch into.",
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },

    "BastionIPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "BastionHost"
        }
      }
    },

    "BastionHost": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "BastionInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "ImageId": {
          "Fn::FindInMap": ["AWSRegionArch2AMI", {
            "Ref": "AWS::Region"
          }, {
            "Fn::FindInMap": ["AWSInstanceType2Arch", {
              "Ref": "BastionInstanceType"
            }, "Arch"]
          }]
        },
        "SecurityGroupIds": [{
          "Ref": "BastionSecurityGroup"
        }]
      }
    },

    "BastionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to the Bastion host",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Ref": "SSHFrom"
          }
        }],
        "SecurityGroupEgress": [{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Fn::FindInMap": ["SubnetConfig", "Private1", "CIDR"]
          }
        }, {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Fn::FindInMap": ["SubnetConfig", "Private2", "CIDR"]
          }
        }]
      }
    }
  },

  "Outputs" : {
  }
}